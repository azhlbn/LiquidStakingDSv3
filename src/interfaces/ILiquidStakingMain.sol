// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.4;

interface Interface {
    event BonusRewardsClaimError(uint256 periodNumber, string dappName, bytes reason);
    event BonusRewardsClaimSuccess(uint256 periodNumber, string dappName, uint256 gain);
    event ClaimDappError(uint256 indexed amount, uint256 indexed era, bytes indexed reason);
    event ClaimDappSuccess(uint256 receivedRewards, uint256 indexed _era);
    event ClaimStakerError(uint256 indexed era, bytes indexed reason);
    event ClaimStakerSuccess(uint256 indexed era);
    event Claimed(address indexed user, uint256 amount);
    event ClaimedFromUtility(address indexed user, string indexed utility, uint256 amount);
    event FillRewardPool(address indexed sender, uint256 value);
    event FillUnbonded(address indexed sender, uint256 value);
    event FillUnstaking(address indexed sender, uint256 value);
    event HarvestRewards(address indexed user, string indexed utility, uint256 amount);
    event Initialized(uint8 version);
    event PeriodUpdateStakeError(uint256 periodNumber, string dappName, bytes reason);
    event PeriodUpdateStakeSuccess(uint256 periodNumber, string dappName);
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
    event SetMinStakeAmount(address indexed sender, uint256 amount);
    event StakeError(address indexed staker, string indexed utilityName, uint256 amount, bytes reason);
    event StakeSuccess(address indexed staker, string indexed utilityName, uint256 amount);
    event Staked(address indexed user, uint256 val);
    event StakedInUtility(address indexed user, string indexed utility, uint256 val);
    event Synchronization(address indexed sender, uint256 indexed era);
    event UnlockError(string indexed utility, uint256 sum2unstake, uint256 indexed era, bytes indexed reason);
    event UnlockSuccess();
    event UnstakeError(string indexed utility, uint256 sum2unstake, uint256 indexed era, bytes indexed reason);
    event UnstakeSuccess(uint256 indexed era, uint256 sum2unstake);
    event Unstaked(address indexed user, uint256 amount, bool immediate);
    event UnstakedFromUtility(address indexed user, string indexed utility, uint256 amount, bool immediate);
    event WithdrawBonusRewards(address caller, uint256 period, uint256 amount);
    event WithdrawRevenue(uint256 amount);
    event WithdrawUnbondedError(uint256 indexed _era, bytes indexed reason);
    event WithdrawUnbondedSuccess(uint256 indexed _era);
    event Withdrawn(address indexed user, uint256 val);

    function DAPPS_STAKING() external view returns (address);
    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
    function DNTname() external view returns (string memory);
    function MANAGEMENT_FEE() external view returns (uint8);
    function MANAGER() external view returns (bytes32);
    function REVENUE_FEE() external view returns (uint8);
    function REWARDS_PRECISION() external view returns (uint256);
    function UNSTAKING_FEE() external view returns (uint8);
    function accumulatedRewardsPerShare(uint256) external view returns (uint256);
    function adaptersDistr() external view returns (address);
    function bonusRewardsPool() external view returns (uint256);
    function buffer(address, uint256) external view returns (uint256);
    function claim(string[] memory _utilities, uint256[] memory _amounts) external;
    function claimAll() external;
    function claimingTxLimit() external view returns (uint256);
    function currentEra() external view returns (uint256);
    function currentPeriod() external view returns (uint256);
    function dapps(string memory)
        external
        view
        returns (address dappAddress, uint256 stakedBalance, uint256 sum2unstake);
    function dappsList(uint256) external view returns (string memory);
    function deactivationEra(string memory) external view returns (uint256);
    function distr() external view returns (address);
    function dntToken() external view returns (address);
    function eraBuffer(uint256) external view returns (uint256);
    function eraRevenue(uint256) external view returns (bool done, uint256 val);
    function eraRewards(uint256) external view returns (uint256);
    function eraShotsLimit() external view returns (uint256);
    function eraStakerReward(uint256) external view returns (bool done, uint256 val);
    function eraUnstaked(uint256) external view returns (bool done, uint256 val);
    function getDappsList() external view returns (string[] memory);
    function getRoleAdmin(bytes32 role) external view returns (bytes32);
    function grantRole(bytes32 role, address account) external;
    function hasRole(bytes32 role, address account) external view returns (bool);
    function haveUtility(string memory) external view returns (bool);
    function isActive(string memory) external view returns (bool);
    function isLpToken(address) external view returns (bool);
    function isPartner(address) external view returns (bool);
    function isStaker(address) external view returns (bool);
    function isUnstakes() external view returns (bool);
    function lastClaimed() external view returns (uint256);
    function lastEraTotalBalance() external view returns (uint256);
    function lastStaked() external view returns (uint256);
    function lastUnstaked() external view returns (uint256);
    function lastUpdated() external view returns (uint256);
    function liquidStakingManager() external view returns (address);
    function lpHandlers(address) external view returns (address);
    function lpTokens(uint256) external view returns (address);
    function maxDappsAmountPerCall() external view returns (uint256);
    function minStakeAmount() external view returns (uint256);
    function nftDistr() external view returns (address);
    function partnerIdx(address) external view returns (uint256);
    function partners(uint256) external view returns (address);
    function partnersLimit() external view returns (uint256);
    function paused() external view returns (bool);
    function periods(uint256) external view returns (bool initiated, uint256 voteStake, uint256 buidAndEarnStake);
    function periodsStakes(address, uint256, uint256) external view returns (uint256);
    function previewUserRewards(string memory _utility, address _user) external view returns (uint256);
    function renounceRole(bytes32 role, address account) external;
    function revokeRole(bytes32 role, address account) external;
    function rewardPool() external view returns (uint256);
    function stake(string[] memory _utilities, uint256[] memory _amounts) external payable;
    function stakers(uint256) external view returns (address);
    function stakes(address) external view returns (uint256 totalBalance, uint256 eraStarted);
    function sum2unstake() external view returns (uint256);
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
    function sync(uint256 _era) external;
    function syncHarvest(address _user, string[] memory _utilities) external;
    function totalBalance() external view returns (uint256);
    function totalRevenue() external view returns (uint256);
    function totalUserRewards(address) external view returns (uint256);
    function unbondedPool() external view returns (uint256);
    function unstake(string[] memory _utilities, uint256[] memory _amounts, bool _immediate) external;
    function unstakingPool() external view returns (uint256);
    function updateUserBalanceInAdapter(string memory _utility, address _user) external;
    function updateUserBalanceInUtility(string memory _utility, address _user) external;
    function usersShotsPerEra(address, uint256, uint256) external view returns (uint256);
    function utilName() external view returns (string memory);
    function voteSubperiod() external view returns (bool);
    function withdraw(uint256 _id) external;
    function withdrawBlock() external view returns (uint256);
    function withdrawals(address, uint256) external view returns (uint256 val, uint256 eraReq, uint256 lag);
}